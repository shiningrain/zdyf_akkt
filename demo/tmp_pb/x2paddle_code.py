import paddle
import math
from x2paddle.op_mapper.onnx2paddle import onnx_custom_layer as x2paddle_nn

class ONNXModel(paddle.nn.Layer):
    def __init__(self):
        super(ONNXModel, self).__init__()
        self.x2paddle_functional_1_dense_BiasAdd_ReadVariableOp_resource_0 = self.create_parameter(shape=[10], attr='x2paddle_functional_1_dense_BiasAdd_ReadVariableOp_resource_0', dtype='float32', default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.x2paddle_functional_1_dense_MatMul_ReadVariableOp_resource_0 = self.create_parameter(shape=[512, 10], attr='x2paddle_functional_1_dense_MatMul_ReadVariableOp_resource_0', dtype='float32', default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.x2paddle_functional_1_expand_last_dim_ExpandDims_axes = self.create_parameter(shape=[1], attr='x2paddle_functional_1_expand_last_dim_ExpandDims_axes', dtype='int64', default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.x2paddle_functional_1_normalization_Reshape_0 = self.create_parameter(shape=[1, 1, 1, 1], attr='x2paddle_functional_1_normalization_Reshape_0', dtype='float32', default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.x2paddle_functional_1_normalization_Sqrt_0 = self.create_parameter(shape=[1, 1, 1, 1], attr='x2paddle_functional_1_normalization_Sqrt_0', dtype='float32', default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.conv0 = paddle.nn.Conv2D(in_channels=3, out_channels=64, kernel_size=[3, 3], padding=1)
        self.relu0 = paddle.nn.ReLU()
        self.conv1 = paddle.nn.Conv2D(in_channels=64, out_channels=64, kernel_size=[3, 3], padding=1)
        self.relu1 = paddle.nn.ReLU()
        self.pool0 = paddle.nn.MaxPool2D(kernel_size=[2, 2], stride=2)
        self.conv2 = paddle.nn.Conv2D(in_channels=64, out_channels=128, kernel_size=[3, 3], padding=1)
        self.relu2 = paddle.nn.ReLU()
        self.conv3 = paddle.nn.Conv2D(in_channels=128, out_channels=128, kernel_size=[3, 3], padding=1)
        self.relu3 = paddle.nn.ReLU()
        self.pool1 = paddle.nn.MaxPool2D(kernel_size=[2, 2], stride=2)
        self.conv4 = paddle.nn.Conv2D(in_channels=128, out_channels=256, kernel_size=[3, 3], padding=1)
        self.relu4 = paddle.nn.ReLU()
        self.conv5 = paddle.nn.Conv2D(in_channels=256, out_channels=256, kernel_size=[3, 3], padding=1)
        self.relu5 = paddle.nn.ReLU()
        self.conv6 = paddle.nn.Conv2D(in_channels=256, out_channels=256, kernel_size=[3, 3], padding=1)
        self.relu6 = paddle.nn.ReLU()
        self.pool2 = paddle.nn.MaxPool2D(kernel_size=[2, 2], stride=2)
        self.conv7 = paddle.nn.Conv2D(in_channels=256, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu7 = paddle.nn.ReLU()
        self.conv8 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu8 = paddle.nn.ReLU()
        self.conv9 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu9 = paddle.nn.ReLU()
        self.pool3 = paddle.nn.MaxPool2D(kernel_size=[2, 2], stride=2)
        self.conv10 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu10 = paddle.nn.ReLU()
        self.conv11 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu11 = paddle.nn.ReLU()
        self.conv12 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu12 = paddle.nn.ReLU()
        self.pool4 = paddle.nn.MaxPool2D(kernel_size=[2, 2], stride=2)
        self.softmax0 = paddle.nn.Softmax()

    def forward(self, x2paddle_input_1):
        x2paddle_functional_1_dense_BiasAdd_ReadVariableOp_resource_0 = self.x2paddle_functional_1_dense_BiasAdd_ReadVariableOp_resource_0
        x2paddle_functional_1_dense_MatMul_ReadVariableOp_resource_0 = self.x2paddle_functional_1_dense_MatMul_ReadVariableOp_resource_0
        x2paddle_functional_1_expand_last_dim_ExpandDims_axes = self.x2paddle_functional_1_expand_last_dim_ExpandDims_axes
        x2paddle_functional_1_normalization_Reshape_0 = self.x2paddle_functional_1_normalization_Reshape_0
        x2paddle_functional_1_normalization_Sqrt_0 = self.x2paddle_functional_1_normalization_Sqrt_0
        x2paddle_functional_1_expand_last_dim_ExpandDims_0 = paddle.unsqueeze(x=x2paddle_input_1, axis=x2paddle_functional_1_expand_last_dim_ExpandDims_axes)
        x2paddle_functional_1_normalization_sub_0 = paddle.subtract(x=x2paddle_functional_1_expand_last_dim_ExpandDims_0, y=x2paddle_functional_1_normalization_Reshape_0)
        x2paddle_functional_1_normalization_truediv_0 = paddle.divide(x=x2paddle_functional_1_normalization_sub_0, y=x2paddle_functional_1_normalization_Sqrt_0)
        x2paddle_functional_1_normalization_truediv_0_transpose0 = paddle.transpose(x=x2paddle_functional_1_normalization_truediv_0, perm=[0, 3, 1, 2])
        x2paddle_functional_1_normalization_truediv_0_upsample0 = paddle.nn.functional.interpolate(x=x2paddle_functional_1_normalization_truediv_0_transpose0, scale_factor=[1.1428571939468384, 1.1428571939468384], align_corners=True, mode='bilinear', align_mode=1)
        x2paddle_functional_1_resizing_resize_ResizeBilinear_0 = paddle.transpose(x=x2paddle_functional_1_normalization_truediv_0_upsample0, perm=[0, 2, 3, 1])
        x2paddle_functional_1_concatenate_concat_0 = paddle.concat(x=[x2paddle_functional_1_resizing_resize_ResizeBilinear_0, x2paddle_functional_1_resizing_resize_ResizeBilinear_0, x2paddle_functional_1_resizing_resize_ResizeBilinear_0], axis=3)
        x2paddle_adjusted_input12 = paddle.transpose(x=x2paddle_functional_1_concatenate_concat_0, perm=[0, 3, 1, 2])
        x2paddle_convolution_output12 = self.conv0(x2paddle_adjusted_input12)
        x2paddle_functional_1_vgg16_block1_conv1_Relu_0 = self.relu0(x2paddle_convolution_output12)
        x2paddle_convolution_output11 = self.conv1(x2paddle_functional_1_vgg16_block1_conv1_Relu_0)
        x2paddle_functional_1_vgg16_block1_conv2_Relu_0 = self.relu1(x2paddle_convolution_output11)
        x2paddle_functional_1_vgg16_block1_conv2_Relu_0_pooling0 = self.pool0(x2paddle_functional_1_vgg16_block1_conv2_Relu_0)
        x2paddle_convolution_output10 = self.conv2(x2paddle_functional_1_vgg16_block1_conv2_Relu_0_pooling0)
        x2paddle_functional_1_vgg16_block2_conv1_Relu_0 = self.relu2(x2paddle_convolution_output10)
        x2paddle_convolution_output9 = self.conv3(x2paddle_functional_1_vgg16_block2_conv1_Relu_0)
        x2paddle_functional_1_vgg16_block2_conv2_Relu_0 = self.relu3(x2paddle_convolution_output9)
        x2paddle_functional_1_vgg16_block2_conv2_Relu_0_pooling0 = self.pool1(x2paddle_functional_1_vgg16_block2_conv2_Relu_0)
        x2paddle_convolution_output8 = self.conv4(x2paddle_functional_1_vgg16_block2_conv2_Relu_0_pooling0)
        x2paddle_functional_1_vgg16_block3_conv1_Relu_0 = self.relu4(x2paddle_convolution_output8)
        x2paddle_convolution_output7 = self.conv5(x2paddle_functional_1_vgg16_block3_conv1_Relu_0)
        x2paddle_functional_1_vgg16_block3_conv2_Relu_0 = self.relu5(x2paddle_convolution_output7)
        x2paddle_convolution_output6 = self.conv6(x2paddle_functional_1_vgg16_block3_conv2_Relu_0)
        x2paddle_functional_1_vgg16_block3_conv3_Relu_0 = self.relu6(x2paddle_convolution_output6)
        x2paddle_functional_1_vgg16_block3_conv3_Relu_0_pooling0 = self.pool2(x2paddle_functional_1_vgg16_block3_conv3_Relu_0)
        x2paddle_convolution_output5 = self.conv7(x2paddle_functional_1_vgg16_block3_conv3_Relu_0_pooling0)
        x2paddle_functional_1_vgg16_block4_conv1_Relu_0 = self.relu7(x2paddle_convolution_output5)
        x2paddle_convolution_output4 = self.conv8(x2paddle_functional_1_vgg16_block4_conv1_Relu_0)
        x2paddle_functional_1_vgg16_block4_conv2_Relu_0 = self.relu8(x2paddle_convolution_output4)
        x2paddle_convolution_output3 = self.conv9(x2paddle_functional_1_vgg16_block4_conv2_Relu_0)
        x2paddle_functional_1_vgg16_block4_conv3_Relu_0 = self.relu9(x2paddle_convolution_output3)
        x2paddle_functional_1_vgg16_block4_conv3_Relu_0_pooling0 = self.pool3(x2paddle_functional_1_vgg16_block4_conv3_Relu_0)
        x2paddle_convolution_output2 = self.conv10(x2paddle_functional_1_vgg16_block4_conv3_Relu_0_pooling0)
        x2paddle_functional_1_vgg16_block5_conv1_Relu_0 = self.relu10(x2paddle_convolution_output2)
        x2paddle_convolution_output1 = self.conv11(x2paddle_functional_1_vgg16_block5_conv1_Relu_0)
        x2paddle_functional_1_vgg16_block5_conv2_Relu_0 = self.relu11(x2paddle_convolution_output1)
        x2paddle_convolution_output = self.conv12(x2paddle_functional_1_vgg16_block5_conv2_Relu_0)
        x2paddle_functional_1_vgg16_block5_conv3_Relu_0 = self.relu12(x2paddle_convolution_output)
        x2paddle_functional_1_vgg16_block5_conv3_Relu_0_pooling0 = self.pool4(x2paddle_functional_1_vgg16_block5_conv3_Relu_0)
        x2paddle_functional_1_vgg16_block5_conv3_Relu_0_transpose0 = paddle.transpose(x=x2paddle_functional_1_vgg16_block5_conv3_Relu_0_pooling0, perm=[0, 2, 3, 1])
        x2paddle_functional_1_flatten_Reshape_0 = paddle.reshape(x=x2paddle_functional_1_vgg16_block5_conv3_Relu_0_transpose0, shape=[-1, 512])
        x2paddle_functional_1_dense_MatMul_0 = paddle.matmul(x=x2paddle_functional_1_flatten_Reshape_0, y=x2paddle_functional_1_dense_MatMul_ReadVariableOp_resource_0)
        x2paddle_functional_1_dense_BiasAdd_0 = paddle.add(x=x2paddle_functional_1_dense_MatMul_0, y=x2paddle_functional_1_dense_BiasAdd_ReadVariableOp_resource_0)
        x2paddle_classification_head_1 = self.softmax0(x2paddle_functional_1_dense_BiasAdd_0)
        return x2paddle_classification_head_1

def main(x2paddle_input_1):
    # There are 1 inputs.
    # x2paddle_input_1: shape-[-1, 28, 28], type-float32.
    paddle.disable_static()
    params = paddle.load(r'/data1/zxy/project_zdyf/zdyf_akkt/demo/tmp_pb/model.pdparams')
    model = ONNXModel()
    model.set_dict(params, use_structured_name=True)
    model.eval()
    out = model(x2paddle_input_1)
    return out
